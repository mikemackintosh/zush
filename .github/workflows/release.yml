name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Parse conventional commits and categorize
          FEATURES=$(echo "$CHANGELOG" | grep -i "^- feat" || echo "")
          FIXES=$(echo "$CHANGELOG" | grep -i "^- fix" || echo "")
          BREAKING=$(echo "$CHANGELOG" | grep -i "BREAKING CHANGE" || echo "")
          OTHERS=$(echo "$CHANGELOG" | grep -vi "^- feat" | grep -vi "^- fix" | grep -vi "BREAKING CHANGE" || echo "")

          # Build formatted changelog
          FORMATTED_CHANGELOG="## What's Changed\n\n"

          if [ -n "$BREAKING" ]; then
            FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### ⚠️ Breaking Changes\n${BREAKING}\n\n"
          fi

          if [ -n "$FEATURES" ]; then
            FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### ✨ Features\n${FEATURES}\n\n"
          fi

          if [ -n "$FIXES" ]; then
            FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 🐛 Bug Fixes\n${FIXES}\n\n"
          fi

          if [ -n "$OTHERS" ]; then
            FORMATTED_CHANGELOG="${FORMATTED_CHANGELOG}### 📝 Other Changes\n${OTHERS}\n\n"
          fi

          # Save to file for multiline output
          echo "$FORMATTED_CHANGELOG" > changelog.md
          echo "Generated changelog:"
          cat changelog.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release v${{ steps.get_version.outputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-upload:
    name: Build and Upload (${{ matrix.os }})
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS builds
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: zush-prompt-macos-arm64
          - os: macos-13
            target: x86_64-apple-darwin
            artifact_name: zush-prompt-macos-x86_64

          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: zush-prompt-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: zush-prompt-linux-arm64

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: zush-prompt-windows-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tool
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}

      - name: Build release binary (cargo)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd target/${{ matrix.target }}/release
          BINARY_NAME="zush-prompt"

          # Create tarball
          tar -czf ${{ matrix.artifact_name }}.tar.gz $BINARY_NAME

          # Calculate checksum
          if [ "${{ runner.os }}" = "macOS" ]; then
            shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
          else
            sha256sum ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256
          fi

          # Move to workspace root for upload
          mv ${{ matrix.artifact_name }}.tar.gz ${{ github.workspace }}/
          mv ${{ matrix.artifact_name }}.tar.gz.sha256 ${{ github.workspace }}/

      - name: Prepare binary (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd target/${{ matrix.target }}/release
          $BinaryName = "zush-prompt.exe"
          $ArchiveName = "${{ matrix.artifact_name }}.zip"

          # Create zip archive
          Compress-Archive -Path $BinaryName -DestinationPath $ArchiveName

          # Calculate checksum
          $Hash = (Get-FileHash $ArchiveName -Algorithm SHA256).Hash
          "$Hash  $ArchiveName" | Out-File -FilePath "$ArchiveName.sha256" -Encoding ASCII

          # Move to workspace root for upload
          Move-Item $ArchiveName $env:GITHUB_WORKSPACE/
          Move-Item "$ArchiveName.sha256" $env:GITHUB_WORKSPACE/

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: |
            ${{ matrix.artifact_name }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Summary
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release Summary
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          echo "::notice::Release v${VERSION} created successfully!"
          echo "::notice::Download URLs:"
          echo "::notice::  macOS ARM64:    https://github.com/${{ github.repository }}/releases/download/v${VERSION}/zush-prompt-macos-arm64.tar.gz"
          echo "::notice::  macOS x86_64:   https://github.com/${{ github.repository }}/releases/download/v${VERSION}/zush-prompt-macos-x86_64.tar.gz"
          echo "::notice::  Linux x86_64:   https://github.com/${{ github.repository }}/releases/download/v${VERSION}/zush-prompt-linux-x86_64.tar.gz"
          echo "::notice::  Linux ARM64:    https://github.com/${{ github.repository }}/releases/download/v${VERSION}/zush-prompt-linux-arm64.tar.gz"
          echo "::notice::  Windows x86_64: https://github.com/${{ github.repository }}/releases/download/v${VERSION}/zush-prompt-windows-x86_64.zip"
